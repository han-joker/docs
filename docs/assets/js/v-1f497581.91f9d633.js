"use strict";(self.webpackChunkhan_joker_docs=self.webpackChunkhan_joker_docs||[]).push([[842],{2401:(e,l,a)=>{a.r(l),a.d(l,{data:()=>r});const r={key:"v-1f497581",path:"/storage/cache-pattern.html",title:"缓存模式",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Cache-Aside",slug:"cache-aside",children:[]},{level:2,title:"Read-Through，Write-Through",slug:"read-through-write-through",children:[]},{level:2,title:"Write-Behind(Write-Back)",slug:"write-behind-write-back",children:[]},{level:2,title:"Cache-Around",slug:"cache-around",children:[]}],filePathRelative:"storage/cache-pattern.md",git:{updatedTime:null}}},5699:(e,l,a)=>{a.r(l),a.d(l,{default:()=>G});var r=a(6252),h=a(3283),i=a(7933),n=a(3614),t=a(643),u=a(4208);const d=(0,r.Wm)("h1",{id:"缓存模式",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#缓存模式","aria-hidden":"true"},"#"),(0,r.Uk)(" 缓存模式")],-1),m=(0,r.Wm)("p",null,"应用，缓存，数据库间，常见体系关系：",-1),W=(0,r.Wm)("ul",null,[(0,r.Wm)("li",null,"Cache-Aside"),(0,r.Wm)("li",null,"Read-Through, Write-Through, Read/Write-Through"),(0,r.Wm)("li",null,"Write-Behind(Write-Back)"),(0,r.Wm)("li",null,"Cache-Around")],-1),c=(0,r.Wm)("h2",{id:"cache-aside",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#cache-aside","aria-hidden":"true"},"#"),(0,r.Uk)(" Cache-Aside")],-1),s=(0,r.Wm)("p",null,"缓存端模式，最常见的缓存模式：",-1),p=(0,r.Wm)("ul",null,[(0,r.Wm)("li",null,"读操作：先读缓存，若未命中，读数据库，再写入缓存"),(0,r.Wm)("li",null,"写操作：写数据库，再删除对应的缓存")],-1),g=(0,r.Wm)("p",null,"读流程：",-1),o=(0,r.Wm)("p",null,[(0,r.Wm)("img",{src:h,alt:"Cache-Aside Read"})],-1),k=(0,r.Wm)("p",null,"写流程图:",-1),b=(0,r.Wm)("p",null,[(0,r.Wm)("img",{src:i,alt:"Cache-Aside Write"})],-1),f=(0,r.Wm)("p",null,"通常，缓存的生成是在读操作时，而不是在更新数据库后立即生成缓存。如此操作的一个重要原因是数据可能在下次读取前，被多次修改。写操作时，将数据关联的缓存清除。",-1),w=(0,r.Wm)("p",null,"Cache-Aside 模式在写操作时，会直接操作数据库，这样就会导致，在写操作时，整体存储模块的响应速度会大大降低。",-1),C=(0,r.Wm)("h2",{id:"read-through-write-through",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#read-through-write-through","aria-hidden":"true"},"#"),(0,r.Uk)(" Read-Through，Write-Through")],-1),x=(0,r.Wm)("p",null,"读穿透、写穿透模式。",-1),A=(0,r.Wm)("p",null,"这种模式，由独立缓存层来决定数据的来源和目标。与应用对接的只有应用缓存层，应用不用考虑缓存或是数据库。",-1),B=(0,r.Wm)("p",null,"缓存层主要的操作对象是缓存，由缓存层处理数据库：",-1),T=(0,r.Wm)("ul",null,[(0,r.Wm)("li",null,[(0,r.Wm)("p",null,"读操作时：优先从缓存读取，若未命中，由数据读取，同步写入缓存。")]),(0,r.Wm)("li",null,[(0,r.Wm)("p",null,"当写数据时，先写缓存，同步写入数据库。")])],-1),R=(0,r.Wm)("p",null,"读流程图：",-1),v=(0,r.Wm)("p",null,[(0,r.Wm)("img",{src:n,alt:"read through"})],-1),U=(0,r.Wm)("p",null,"写流程图：",-1),_=(0,r.Wm)("p",null,[(0,r.Wm)("img",{src:t,alt:"write through"})],-1),j=(0,r.Wm)("p",null,"Read-through、Write-Through 模式通常在一起使用。",-1),y=(0,r.Wm)("p",null,"通过实现缓存层，达到高效读取，同步写数据的目的。整体思路与 Cache-Aside 类似，不过缓存层逻辑由独立的缓存层实现。",-1),z=(0,r.Wm)("h2",{id:"write-behind-write-back",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#write-behind-write-back","aria-hidden":"true"},"#"),(0,r.Uk)(" Write-Behind(Write-Back)")],-1),H=(0,r.Wm)("p",null,"后端写模式，类似于穿透读写模式，最大的差异在写操作同步数据库时，会采用异步模式，也就是先快速写缓存返回，再异步同步数据库。这样提升了应用写操作的效率。很多应用都会采用这类技术优化，也被称为缓存预写或其他方式预写（文件预写，日志预写）。",-1),N=(0,r.Wm)("ul",null,[(0,r.Wm)("li",null,"读操作：读缓存，若未命中，则读数据库，同步缓存，返回。（与 Read through 一样）"),(0,r.Wm)("li",null,"写操作：写缓存，立即返回，异步写数据库。")],-1),P=(0,r.Wm)("p",null,"写流程图:",-1),Y=(0,r.Wm)("p",null,[(0,r.Wm)("img",{src:u,alt:"Write Behind"})],-1),q=(0,r.Wm)("p",null,"这个异步写，对于应用来说，就是后台程序，因此被称为 Back 或 Behind 模式。",-1),D=(0,r.Wm)("p",null,"异步写，会导致数据库和缓存出现较长时间的数据不一致性，这就意味着需要保证，当出现意外情况后，缓存和数据库可以同步。例如，需要为缓存增加日志，便于在出现意外时，可以同步缓存与数据库。",-1),E=(0,r.Wm)("h2",{id:"cache-around",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#cache-around","aria-hidden":"true"},"#"),(0,r.Uk)(" Cache-Around")],-1),F=(0,r.Wm)("p",null,"绕过缓存模式，哈哈，就是不用缓存模式。说白了，就是应用直接操作数据库。",-1),G={render:function(e,l){return(0,r.wg)(),(0,r.j4)(r.HY,null,[d,m,W,c,s,p,g,o,k,b,f,w,C,x,A,B,T,R,v,U,_,j,y,z,H,N,P,Y,q,D,E,F],64)}}},7933:(e,l,a)=>{e.exports=a.p+"assets/img/image-20210822135845536.5e0078ff.png"},3283:(e,l,a)=>{e.exports=a.p+"assets/img/image-20210822141745845.c0bb3877.png"},3614:(e,l,a)=>{e.exports=a.p+"assets/img/image-20210822161025045.e73eb932.png"},643:(e,l,a)=>{e.exports=a.p+"assets/img/image-20210822161222736.506daae6.png"},4208:(e,l,a)=>{e.exports=a.p+"assets/img/image-20210822163453827.3b6c30a0.png"}}]);