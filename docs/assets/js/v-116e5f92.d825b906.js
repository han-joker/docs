"use strict";(self.webpackChunkhan_joker_docs=self.webpackChunkhan_joker_docs||[]).push([[826],{9076:(p,e,T)=>{T.r(e),T.d(e,{data:()=>t});const t={key:"v-116e5f92",path:"/protocol/mqtt.html",title:"MQTT",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一、简述",slug:"一、简述",children:[]},{level:2,title:"二、设计规范",slug:"二、设计规范",children:[]}],filePathRelative:"protocol/mqtt.md",git:{updatedTime:1629105133e3}}},6654:(p,e,T)=>{T.r(e),T.d(e,{default:()=>a});const t=(0,T(6252).uE)('<h1 id="mqtt" tabindex="-1"><a class="header-anchor" href="#mqtt" aria-hidden="true">#</a> MQTT</h1><blockquote><p>版权声明：本文为CSDN博主「liefyuan」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/qq_28877125/article/details/78325003</p></blockquote><h2 id="一、简述" tabindex="-1"><a class="header-anchor" href="#一、简述" aria-hidden="true">#</a> 一、简述</h2><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的“轻量级”通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p><p>MQTT是一个基于客户端-服务器的消息发布/订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用。</p><h2 id="二、设计规范" tabindex="-1"><a class="header-anchor" href="#二、设计规范" aria-hidden="true">#</a> 二、设计规范</h2><p>由于物联网的环境是非常特别的，所以MQTT遵循以下设计原则：</p><p>（1）精简，不添加可有可无的功能；</p><p>（2）发布/订阅（Pub/Sub）模式，方便消息在传感器之间传递；</p><p>（3）允许用户动态创建主题，零运维成本；</p><p>（4）把传输量降到最低以提高传输效率；</p><p>（5）把低带宽、高延迟、不稳定的网络等因素考虑在内；</p><p>（6）支持连续的会话控制；</p><p>（7）理解客户端计算能力可能很低；</p><p>（8）提供服务质量管理；</p><p>（9）假设数据不可知，不强求传输数据的类型与格式，保持灵活性。</p><p>三、主要特性  MQTT协议工作在低带宽、不可靠的网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要的几项特性：</p><p>（1）使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合。</p><p>这一点很类似于XMPP，但是MQTT的信息冗余远小于XMPP，,因为XMPP使用XML格式文本来传递数据。</p><p>（2）对负载内容屏蔽的消息传输。</p><p>（3）使用TCP/IP提供网络连接。</p><p>主流的MQTT是基于TCP连接进行数据推送的，但是同样有基于UDP的版本，叫做MQTT-SN。这两种版本由于基于不同的连接方式，优缺点自然也就各有不同了。</p><p>（4）有三种消息发布服务质量：</p><p>“至多一次”，消息发布完全依赖底层TCP/IP网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。这一种方式主要普通APP的推送，倘若你的智能设备在消息推送时未联网，推送过去没收到，再次联网也就收不到了。</p><p>“至少一次”，确保消息到达，但消息重复可能会发生。</p><p>“只有一次”，确保消息到达一次。在一些要求比较严格的计费系统中，可以使用此级别。在计费系统中，消息重复或丢失会导致不正确的结果。这种最高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只会收到一次。</p><p>（5）小型传输，开销很小（固定长度的头部是2字节），协议交换最小化，以降低网络流量。</p><p>这就是为什么在介绍里说它非常适合“在物联网领域，传感器与服务器的通信，信息的收集”，要知道嵌入式设备的运算能力和带宽都相对薄弱，使用这种协议来传递消息再适合不过了。</p><p>（6）使用Last Will和Testament特性通知有关各方客户端异常中断的机制。</p><p>Last Will：即遗言机制，用于通知同一主题下的其他设备发送遗言的设备已经断开了连接。</p><p>Testament：遗嘱机制，功能类似于Last Will。</p><p>四、MQTT协议原理 4.1 MQTT协议实现方式  实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：发布者（Publish）、代理（Broker）（服务器）、订阅者（Subscribe）。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。</p><p>MQTT传输的消息分为：主题（Topic）和负载（payload）两部分：</p><p>（1）Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）；</p><p>（2）payload，可以理解为消息的内容，是指订阅者具体要使用的内容。</p><p>4.2 网络传输与应用消息  MQTT会构建底层网络传输：它将建立客户端到服务器的连接，提供两者之间的一个有序的、无损的、基于字节流的双向传输。</p><p>当应用数据通过MQTT网络发送时，MQTT会把与之相关的服务质量（QoS）和主题名（Topic）相关连。</p><p>4.3MQTT客户端  一个使用MQTT协议的应用程序或者设备，它总是建立到服务器的网络连接。客户端可以：</p><p>（1）发布其他客户端可能会订阅的信息；</p><p>（2）订阅其它客户端发布的消息；</p><p>（3）退订或删除应用程序的消息；</p><p>（4）断开与服务器连接。</p><p>4.4 MQTT服务器  MQTT服务器以称为“消息代理”（Broker），可以是一个应用程序或一台设备。它是位于消息发布者和订阅者之间，它可以：</p><p>（1）接受来自客户的网络连接；</p><p>（2）接受客户发布的应用信息；</p><p>（3）处理来自客户端的订阅和退订请求；</p><p>（4）向订阅的客户转发应用程序消息。</p><p>4.5 MQTT协议中的订阅、主题、会话 一、订阅（Subscription）</p><p>订阅包含主题筛选器（Topic Filter）和最大服务质量（QoS）。订阅会与一个会话（Session）关联。一个会话可以包含多个订阅。每一个会话中的每个订阅都有一个不同的主题筛选器。</p><p>二、会话（Session）</p><p>每个客户端与服务器建立连接后就是一个会话，客户端和服务器之间有状态交互。会话存在于一个网络之间，也可能在客户端和服务器之间跨越多个连续的网络连接。</p><p>三、主题名（Topic Name）</p><p>连接到一个应用程序消息的标签，该标签与服务器的订阅相匹配。服务器会将消息发送给订阅所匹配标签的每个客户端。</p><p>四、主题筛选器（Topic Filter）</p><p>一个对主题名通配符筛选器，在订阅表达式中使用，表示订阅所匹配到的多个主题。</p><p>五、负载（Payload）</p><p>消息订阅者所具体接收的内容。</p><p>4.6 MQTT协议中的方法  MQTT协议中定义了一些方法（也被称为动作），来于表示对确定资源所进行操作。这个资源可以代表预先存在的数据或动态生成数据，这取决于服务器的实现。通常来说，资源指服务器上的文件或输出。主要方法有：</p><p>（1）Connect。等待与服务器建立连接。</p><p>（2）Disconnect。等待MQTT客户端完成所做的工作，并与服务器断开TCP/IP会话。</p><p>（3）Subscribe。等待完成订阅。</p><p>（4）UnSubscribe。等待服务器取消客户端的一个或多个topics订阅。</p><p>（5）Publish。MQTT客户端发送消息请求，发送完成后返回应用程序线程。</p><p>五、MQTT协议数据包结构  在MQTT协议中，一个MQTT数据包由：固定头（Fixed header）、可变头（Variable header）、消息体（payload）三部分构成。MQTT数据包结构如下：</p><p>（1）固定头（Fixed header）。存在于所有MQTT数据包中，表示数据包类型及数据包的分组类标识。</p><p>（2）可变头（Variable header）。存在于部分MQTT数据包中，数据包类型决定了可变头是否存在及其具体内容。</p><p>（3）消息体（Payload）。存在于部分MQTT数据包中，表示客户端收到的具体内容。</p><p>5.1 MQTT固定头  固定报头，所有的MQTT控制报文都包含，可变报头与有效载荷是部分MQTT控制报文包含。 固定报头占据两字节的空间，具体见：</p><p>固定报头的第一个字节分为控制报文的类型（4bit），以及控制报文类型的标志位，控制类型共有14种，其中0与15被系统保留出来，其他的类型具体见：</p><p>类型 值 说明 Reserved 0 系统保留 CONNECT 1 客户端请求连接服务端 CONNACK 2 连接报文确认 PUBLISH 3 发布消息 PUBACK 4 消息发布收到确认（QoS 1） PUBREC 5 发布收到（QoS2） PUBREL 6 发布释放（QoS2） PUBCOMP 7 消息发布完成（QoS2） SUBSCRIBE 8 客户端订阅请求 SUBACK 9 订阅请求报文确认 UNSUBSCRIBE 10 客户端取消订阅请求 UNSUBACK 11 取消订阅报文确认 PINGREQ 12 心跳请求 PINGRESP 13 心跳响应 DISCONNECT 14 客户端断开连接 Reserved 15 系统保留  固定报头的bit0-bit3为标志位，依照报文类型有不同的含义，事实上，除了PUBLISH类型报文以外，其他报文的标志位均为系统保留，PUBLISH报文的第一字节bit3是控制报文的重复分发标志（DUP），bit1-bit2是服务质量等级，bit0是PUBLISH报文的保留标志，用于标识PUBLISH是否保留，当客户端发送一个PUBLISH消息到服务器，如果保留标识位置1，那么服务器应该保留这条消息，当一个新的订阅者订阅这个主题的时候，最后保留的主题消息应被发送到新订阅的用户。</p><p>固定报头的第二个字节开始是剩余长度字段，是用于记录剩余报文长度的，表示当前的消息剩余的字节数，包括可变报头和有效载荷区域（如果存在），但剩余长度不包括用于编码剩余长度字段本身的字节数。</p><p>剩余长度字段使用一个变长度编码方案，对小于128的值它使用单字节编码，而对于更大的数值则按下面的方式处理：每个字节的低7位用于编码数据长度，最高位（bit7）用于标识剩余长度字段是否有更多的字节，且按照大端模式进行编码，因此每个字节可以编码128个数值和一个延续位，剩余长度字段最大可拥有4个字节。</p><p>当剩余长度使用1个字节存储时，其取值范围为0(0x00)~127(0x7f)。</p><p>当使用2个字节时，其取值范围为128(0x80,0x01)~16383(0Xff,0x7f)。</p><p>当使用3个字节时，其取值范围为16384(0x80,0x80,0x01)~2097151(0xFF,0xFF,0x7F)。</p><p>当使用4个字节时，其取值范围为2097152(0x80,0x80,0x80,0x01)~268435455(0xFF,0xFF,0xFF,0x7F)。</p><p>总的来说，MQTT报文理论上可以发送最大256M的报文，当然，这种情况是非常少的。</p><p>固定头存在于所有MQTT数据包中，其结构如下：</p><p>5.1.1 MQTT数据包类型 位置：Byte 1中bits 7-4。</p><p>相于一个4位的无符号值，类型、取值及描述如下：</p><p>5.1.2 标识位 位置：Byte 1中bits 3-0。</p><p>在不使用标识位的消息类型中，标识位被作为保留位。如果收到无效的标志时，接收端必须关闭网络连接：</p><p>（1）DUP：发布消息的副本。用来在保证消息的可靠传输，如果设置为1，则在下面的变长中增加MessageId，并且需要回复确认，以保证消息传输完成，但不能用于检测消息重复发送。</p><p>（2）QoS：发布消息的服务质量，即：保证消息传递的次数</p><pre><code>    Ø00：最多一次，即：&lt;=1\n\n    Ø01：至少一次，即：&gt;=1\n\n    Ø10：一次，即：=1\n\n    Ø11：预留\n</code></pre><p>1 2 3 4 5 6 7 （3）RETAIN： 发布保留标识，表示服务器要保留这次推送的信息，如果有新的订阅者出现，就把这消息推送给它，如果设有那么推送至当前订阅者后释放。 5.1.3 剩余长度（Remaining Length）</p><p>地址：Byte 2。</p><p>固定头的第二字节用来保存变长头部和消息体的总大小的，但不是直接保存的。这一字节是可以扩展，其保存机制，前7位用于保存长度，后一部用做标识。当最后一位为1时，表示长度不足，需要使用二个字节继续保存。例如：计算出后面的大小为0</p><p>5.2 MQTT可变头  MQTT数据包中包含一个可变头，它驻位于固定的头和负载之间。可变头的内容因数据包类型而不同，较常的应用是作为包的标识。</p><p>只有某些报文才拥有可变报头，它在固定报头和有效负载之间，可变报头的内容会根据报文类型的不同而有所不同，但可变报头的报文标识符（Packet Identifier）字段存在于在多个类型的报文里，而有一些报文又没有报文标识符字段，具体见表格，报文标识符结构具体见图：</p><p>报文类型 是否需要报文标识符字段 CONNECT 不需要 CONNACK 不需要 PUBLISH 需要（如果QoS &gt; 0） PUBACK 需要 PUBREC 需要 PUBREL 需要 PUBCOMP 需要 SUBSCRIBE 需要 SUBACK 需要 UNSUBSCRIBE 需要 UNSUBACK 需要 PINGREQ 不需要 PINGRESP 不需要 DISCONNECT 不需要 5.3 Payload消息体  Payload消息体位MQTT数据包的第三部分，包含CONNECT、SUBSCRIBE、SUBACK、UNSUBSCRIBE四种类型的消息：</p><p>（1）CONNECT，消息体内容主要是：客户端的ClientID、订阅的Topic、Message以及用户名和密码。</p><p>（2）SUBSCRIBE，消息体内容是一系列的要订阅的主题以及QoS。</p><p>（3）SUBACK，消息体内容是服务器对于SUBSCRIBE所申请的主题及QoS进行确认和回复。</p><p>（4）UNSUBSCRIBE，消息体内容是要订阅的主题。</p>',95),a={render:function(p,e){return t}}}}]);